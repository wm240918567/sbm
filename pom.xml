<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.wm</groupId>
  <artifactId>sbm</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>sbm Maven Webapp</name>
  <url>http://maven.apache.org</url>
  
  
  <!-- springboot插件，继承关系，简化配置，具体简化哪些百度“spring boot  maven parent 作用”既有。 -->
	<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
        <relativePath /> <!-- 父项目相对于子项目的路径 -->
    </parent>
	
	<properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  		<!-- JAVA 编译版本 -->
        <java.version>1.8</java.version>
    </properties>
	
	<dependencies>
		
		<!-- 添加thymeleaf依赖 -->
		<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-thymeleaf</artifactId>
	    </dependency>
		<!-- 
			添加spring boot 的 mybatis依赖
			请勿使用1.0.0版本，不支持拦截器插件
		 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.1.1</version>
		</dependency>
		
		<!-- 
			mybatis提供了拦截器接口，可以实现自己的分页拦截器，
			将其作为一个plugin装入草SqlSessionFactory中。
			github上有个人写了一个分页插件
			https://github.com/pagehelper/Mybatis-Pagehelper
		 -->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>4.1.0</version>
		</dependency>
		
		<!-- spring boot中spring data JPA的依赖 -->
<!-- 		<dependency> -->
<!-- 		    <groupId>org.springframework.boot</groupId> -->
<!-- 		    <artifactId>spring-boot-starter-data-jpa</artifactId> -->
<!-- 		</dependency> -->
		<!-- mysql依赖 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		<!-- devtools热部署模块，当发生save保存时：自动重启服务。
			配置依赖即可使用。
			原理：使用两个ClassLoader，
			一个Base ClassLoader加载器，用于加载不会改变的三方依赖jar包；
			另一个Restart ClassLoader加载器，用于加载自己编写的类。
			当执行save时，重启服务，原先的Restart ClassLoader被丢掉。
			重新new 一个新的Restart ClassLoader来加载自己编写的类。
			不用加载jar是快速重启的根本原因。5秒以内即可重启完毕。
		 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- 依赖不会被继承。依赖于此boot项目的项目需要重新添加此依赖 -->
			<optional>true</optional>
			<scope>true</scope>
		</dependency>
	
		<!-- json解析框架：fastjson依赖 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.29</version>
		</dependency>
		
		<!-- 核心模块，包括自动配置支持、日志和YAML -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 日志 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j</artifactId>
            <version>1.3.8.RELEASE</version>
        </dependency>
        <!-- 测试模块，包括JUnit、Hamcrest、Mockito -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
		
        <!-- Web模块 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
	
		<!-- JSP依赖 -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		</dependency>
		<!-- spring bootz中有junit配置，不需要再次引入依赖 -->
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	 </build>
</project>
